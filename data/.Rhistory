z = ~Happiness.Score, color = ~Happiness.Score, colors = 'Greens',
text = ~Country, locations = ~CODE, marker = list(line = l)
)
fig <- fig %>% colorbar(title = 'Happiness Score', tickprefix = ':) ')
fig <- fig %>% layout(
title = 'World Happiness 2021',
geo = g
)
fig
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
fig <- plot_geo(happiness_map_2021)
fig <- fig %>% add_trace(
z = ~Happiness.Score + 'Score', color = ~Happiness.Score, colors = 'Greens',
text = ~Country, locations = ~CODE, marker = list(line = l)
)
fig <- fig %>% colorbar(title = 'Happiness Score', tickprefix = ':) ')
fig <- fig %>% layout(
title = 'World Happiness 2021',
geo = g
)
fig
View(world_happiness_21)
shiny::runApp('~/info201/a3---data-visualization-and-applications-staccjch')
# load libraries
library(stringr)
library(dplyr)
library(ggplot2)
# library(tidyverse)
library(hrbrthemes)
library(viridis)
setwd('~/info201/a3---data-visualization-and-applications-staccjch/incarceration-trends')
# Load datasets
jailpop_year_df <- read.csv('year-end-prison-2021.csv')
incar_trend_df <- read.csv('incarceration_trends.csv')
setwd("~/info201/a3---data-visualization-and-applications-staccjch/incarceration-trends")
shiny::runApp('info201/stacy_project')
runApp('info201/stacy_project')
l <- list(color = toRGB("grey"), width = 0.5)
# specify map projection/options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Mercator')
)
fig <- plot_geo(happiness_map_2021)
fig <- fig %>% add_trace(
z = ~Happiness.Score, color = ~Happiness.Score, colors = 'Greens',
text = ~Country, locations = ~CODE, marker = list(line = l)
)
fig <- fig %>% colorbar(title = 'Happiness Score', tickprefix = ':) ')
fig <- fig %>% layout(
title = 'World Happiness 2021',
geo = g
)
fig
runApp('info201/stacy_project')
shiny::runApp('info201/Lecture practices/census-app')
runApp()
rlang::last_error()
# import Shiny
library(shiny)
runApp('info201/Lecture practices/census-app')
runApp()
runApp('info201/Lecture practices/census-app')
runApp()
runApp('info201/Lecture practices/census-app')
runApp('info201/Lecture practices/census-app')
runApp('info201/Lecture practices/census-app')
counties <- readRDS("census-app/data/counties.rds")
counties <- readRDS("~/info201/Lecture practices/census-app/data/counties.rds")
head(countries)
head(counties)
View(counties)
install.packages(c("maps", "mapproj"))
source("~/info201/Lecture practices/census-app/helpers.R")
percent_map(counties$white, "darkgreen", "% White")
library(maps)
library(mapproj)
percent_map(counties$white, "darkgreen", "% White")
runApp('info201/Lecture practices/census-app')
# import Shiny
library(shiny)
# import mapping tools
library(maps)
library(mapproj)
# percent map function = takes in var, color, legend.title, max, min arguments
percent_map(counties$white, "darkgreen", "% White")
# import dataset
counties <- readRDS("~/info201/Lecture practices/census-app/data/counties.rds")
head(counties)
source("~/info201/Lecture practices/census-app/helpers.R") # helps making choropleth maps
runApp('info201/Lecture practices/census-app')
runApp('info201/Lecture practices/census-app')
runApp('info201/Lecture practices/census-app')
runApp('info201/Lecture practices/census-app')
runApp('info201/Lecture practices/census-app')
runApp('info201/Lecture practices/census-app')
runApp('info201/stacy_project')
View(world_happiness_21)
runApp('info201/stacy_project')
runApp('info201/Lecture practices/census-app')
runApp('info201/Lecture practices/census-app')
runApp('info201/Lecture practices/census-app')
runApp('info201/Lecture practices/census-app')
# Note: percent map is designed to work with the counties data set
# It may not work correctly with other data sets if their row order does
# not exactly match the order in which the maps package plots counties
percent_map <- function(var, color, legend.title, min = 0, max = 100) {
# generate vector of fill colors for map
shades <- colorRampPalette(c("white", color))(100)
# constrain gradient to percents that occur between min and max
var <- pmax(var, min)
var <- pmin(var, max)
percents <- as.integer(cut(var, 100,
include.lowest = TRUE, ordered = TRUE))
fills <- shades[percents]
# plot choropleth map
map("county", fill = TRUE, col = fills,
resolution = 0, lty = 0, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# overlay state borders
map("state", col = "white", fill = FALSE, add = TRUE,
lty = 1, lwd = 1, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# add a legend
inc <- (max - min) / 4
legend.text <- c(paste0(min, " % or less"),
paste0(min + inc, " %"),
paste0(min + 2 * inc, " %"),
paste0(min + 3 * inc, " %"),
paste0(max, " % or more"))
legend("bottomleft",
legend = legend.text,
fill = shades[c(1, 25, 50, 75, 100)],
title = legend.title)
}
runApp('info201/Lecture practices/census-app')
runApp('info201/Lecture practices/census-app')
runApp('info201/Lecture practices/census-app')
runApp('info201/Lecture practices/census-app')
runApp('info201/Lecture practices/census-app')
percent_map(counties$white, "darkgreen", "% White")
# import Shiny
library(shiny)
# import mapping tools
library(maps)
library(mapproj)
# import dataset
counties <- readRDS("~/info201/Lecture practices/census-app/data/counties.rds")
head(counties)
source("~/info201/Lecture practices/census-app/helpers.R") # helps making choropleth maps
runApp('info201/Lecture practices/census-app')
library(mapproj)
# percent map function = takes in var, color, legend.title, max, min arguments
percent_map(counties$white, "darkgreen", "% White")
percent_map(counties$white, "darkgreen", "% White")
# import dataset
counties <- readRDS("~/info201/Lecture practices/census-app/data/counties.rds")
head(counties)
source("~/info201/Lecture practices/census-app/helpers.R") # helps making choropleth maps
# percent map function = takes in var, color, legend.title, max, min arguments
percent_map(counties$white, "darkgreen", "% White")
runApp('info201/Lecture practices/census-app')
# import dataset
counties <- readRDS("~/info201/Lecture practices/census-app/data/counties.rds")
head(counties)
source("~/info201/Lecture practices/census-app/helpers.R") # helps making choropleth maps
# percent map function = takes in var, color, legend.title, max, min arguments
percent_map(counties$white, "darkgreen", "% White")
# Note: percent map is designed to work with the counties data set
# It may not work correctly with other data sets if their row order does
# not exactly match the order in which the maps package plots counties
percent_map <- function(var, color, legend.title, min = 0, max = 100) {
# generate vector of fill colors for map
shades <- colorRampPalette(c("white", color))(100)
# constrain gradient to percents that occur between min and max
var <- pmax(var, min)
var <- pmin(var, max)
percents <- as.integer(cut(var, 100,
include.lowest = TRUE, ordered = TRUE))
fills <- shades[percents]
# plot choropleth map
map("county", fill = TRUE, col = fills,
resolution = 0, lty = 0, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# overlay state borders
map("state", col = "white", fill = FALSE, add = TRUE,
lty = 1, lwd = 1, projection = "polyconic",
myborder = 0, mar = c(0,0,0,0))
# add a legend
inc <- (max - min) / 4
legend.text <- c(paste0(min, " % or less"),
paste0(min + inc, " %"),
paste0(min + 2 * inc, " %"),
paste0(min + 3 * inc, " %"),
paste0(max, " % or more"))
legend("bottomleft",
legend = legend.text,
fill = shades[c(1, 25, 50, 75, 100)],
title = legend.title)
}
shiny::runApp('info201/stacy_project')
runApp('info201/stacy_project')
runApp('info201/stacy_project')
runApp('info201/stacy_project')
runApp('info201/stacy_project')
runApp('info201/stacy_project')
runApp('info201/stacy_project')
runApp('info201/stacy_project')
runApp('info201/stacy_project')
runApp('info201/stacy_project')
runApp('info201/stacy_project')
runApp('info201/stacy_project')
runApp('info201/stacy_project')
runApp('info201/stacy_project')
runApp('info201/stacy_project')
runApp('info201/stacy_project')
library(ggplot2)
library(hrbrthemes)
library(tidyverse)
library(openintro)
happiness_df <- read.csv("2021.csv")
happiness_country <- happiness_df %>%
select(Country)
# Keep 30 first rows in the mtcars natively available data set
data=head(happiness_df, 149)
main = "Health vs GDP"
model <- lm(Health..Life.Expectancy. ~ Economy..logged.GDP.per.Capita., data = happiness_df)
summary(model)
# 1/ add text with geom_text, use nudge to nudge the text
ggplot(happiness_df, aes(x=Economy..logged.GDP.per.Capita., y=Health..Life.Expectancy.)) +
geom_point() + # Show dots
labs(title= "GDP vs Health Expectancy", x= "Economy (GDP/Capita)", y= "Life Expectancy") +
geom_text(
label= data$Country,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T) + stat_smooth(method = "lm", se = FALSE)
hist(model$residuals)
world_happiness_21 <- read.csv('2021.csv')
ggplot(world_happiness_21, aes(x = Region, y = Economy..logged.GDP.per.Capita., fill = Region)) +
geom_boxplot()+
labs(title=" GDP per capita by world region, 2021", x= "Country", y = "Economy (GDP/Capita)") +
theme(legend.position = "top")+
coord_flip()
library(ggplot2)
library(hrbrthemes)
library(tidyverse)
library(openintro)
happiness_df <- read.csv("2021.csv")
View(happiness_df)
happiness_country <- happiness_df %>%
select(Country)
View(happiness_country)
# Keep 30 first rows in the mtcars natively available data set
data=head(happiness_df, 149)
main = "Health vs GDP"
model <- lm(Health..Life.Expectancy. ~ Economy..logged.GDP.per.Capita., data = happiness_df)
summary(model)
# 1/ add text with geom_text, use nudge to nudge the text
ggplot(happiness_df, aes(x=Economy..logged.GDP.per.Capita., y=Health..Life.Expectancy.)) +
geom_point() + # Show dots
labs(title= "GDP vs Health Expectancy", x= "Economy (GDP/Capita)", y= "Life Expectancy") +
geom_text(
label= data$Country,
nudge_x = 0.25, nudge_y = 0.25,
check_overlap = T) + stat_smooth(method = "lm", se = FALSE)
hist(model$residuals)
world_happiness_21 <- read.csv('2021.csv')
ggplot(world_happiness_21, aes(x = Region, y = Economy..logged.GDP.per.Capita., fill = Region)) +
geom_boxplot()+
labs(title=" GDP per capita by world region, 2021", x= "Country", y = "Economy (GDP/Capita)") +
theme(legend.position = "top")+
coord_flip()
colnames(world_happiness_21)
ggplot(world_happiness_21, aes(x = Region, y = Generosity, fill = Region)) +
geom_boxplot()+
labs(title=" Generasity by Region", x= "Country", y = "Generosity Score") +
theme(legend.position = "top")+
coord_flip()
# function of boxplot:
make_boxplot <- function(colname) {
ggplot(world_happiness_21, aes(x = Region, y = colname, fill = Region)) +
geom_boxplot()+
labs(title= colname + 'by world region', x= "Country", y = colname) +
theme(legend.position = "top")+
coord_flip()
}
make_boxplot(Generosity)
# function of boxplot:
make_boxplot <- function(colname) {
ggplot(world_happiness_21, aes(x = Region, y = colname, fill = Region)) +
geom_boxplot()+
labs(title= str(colname) + 'by world region', x= "Country", y = str(colname)) +
theme(legend.position = "top")+
coord_flip()
}
make_boxplot(Generosity)
# function of boxplot:
make_boxplot <- function(colname) {
ggplot(world_happiness_21, aes(x = Region, y = colname, fill = Region)) +
geom_boxplot()+
labs(title= 'by world region', x= "Country", y = 'xxxx') +
theme(legend.position = "top")+
coord_flip()
}
make_boxplot(Generosity)
ggplot(world_happiness_21, aes(x = Region, y = Generosity, fill = Region)) +
geom_boxplot()+
labs(title=" Generasity by Region", x= "Country", y = "Generosity Score") +
theme(legend.position = "top")+
coord_flip()
ggplot(world_happiness_21, aes(x = Region, y = Economy..logged.GDP.per.Capita., fill = Region)) +
geom_boxplot()+
labs(title=" GDP per capita by world region, 2021", x= "Country", y = "Economy (GDP/Capita)") +
theme(legend.position = "top")+
coord_flip()
# function of boxplot:
make_boxplot <- function(df, colname) {
ggplot(df, aes(x = Region, y = colname, fill = Region)) +
geom_boxplot()+
labs(title= 'by world region', x= "Country", y = 'xxxx') +
theme(legend.position = "top")+
coord_flip()
}
make_boxplot(world_happiness_21,, Generosity)
# function of boxplot:
make_boxplot <- function(df, colname) {
ggplot(df, aes(x = Region, y = colname, fill = Region)) +
geom_boxplot()+
labs(title= 'by world region', x= "Country", y = 'xxxx') +
theme(legend.position = "top")+
coord_flip()
}
make_boxplot(world_happiness_21, Generosity)
ggplot(world_happiness_21, aes(x = Region, y = Generosity, fill = Region)) +
geom_boxplot()+
labs(title=" Generasity by Region", x= "Country", y = "Generosity Score") +
theme(legend.position = "top")+
coord_flip()
runApp('info201/stacy_project')
colnames(wh_2020_df)[4] <- "Economy..GDP.per.Capita."
# load in original dataframes
wh_2016_df <- read.csv('2016.csv')
wh_2015_df <- read.csv('2015.csv')
wh_2017_df <- read.csv('2017.csv')
wh_2018_df <- read.csv('2018.csv')
wh_2019_df <- read.csv('2019.csv')
wh_2020_df <- read.csv('2020.csv')
wh_2021_df <- read.csv('2021.csv')
colnames <- read.csv('variable_index.csv')
colnames(wh_2020_df)[4] <- "Economy..GDP.per.Capita."
wh_2020_df <- read.csv('2020.csv')
setwd('~/info201/stacy_project/data')
wh_2020_df <- read.csv('2020.csv')
colnames(wh_2020_df)[4] <- "Economy..GDP.per.Capita."
runApp('~/info201/stacy_project')
wh_2016_df <- read.csv('2016.csv')
wh_2015_df <- read.csv('2015.csv')
wh_2017_df <- read.csv('2017.csv')
wh_2018_df <- read.csv('2018.csv')
wh_2019_df <- read.csv('2019.csv')
wh_2020_df <- read.csv('2020.csv')
wh_2021_df <- read.csv('2021.csv')
View(wh_2021_df)
View(wh_2019_df)
runApp('~/info201/stacy_project')
runApp('~/info201/stacy_project')
# load in original dataframes
setwd('~/info201/final-project-staccjch/data')
wh_2016_df <- read.csv('2016.csv')
wh_2015_df <- read.csv('2015.csv')
wh_2017_df <- read.csv('2017.csv')
wh_2018_df <- read.csv('2018.csv')
wh_2019_df <- read.csv('2019.csv')
wh_2020_df <- read.csv('2020.csv')
wh_2021_df <- read.csv('2021.csv')
colnames(wh_2021_df)
make_scatterplot(wh_2021_df)
make_scatterplot <- function(df) {
scatter <- plot_ly(df, x = ~Economy..GDP.per.Capita., y = ~Health..Life.Expectancy.,
# Hover text:
type = 'scatter',
text = ~Country,
color = ~Region,
size = ~Happiness.Score,
mode = "markers")
} # close make_scatterplot
make_scatterplot(wh_2021_df)
make_scatterplot(wh_2021_df)
make_scatterplot(wh_2020_df)
make_scatterplot(wh_2020_df)
library(plotly)
make_scatterplot <- function(df) {
scatter <- plot_ly(df, x = ~Economy..GDP.per.Capita., y = ~Health..Life.Expectancy.,
# Hover text:
type = 'scatter',
text = ~Country,
color = ~Region,
size = ~Happiness.Score,
mode = "markers")
print(scatter)
} # close make_scatterplot
make_scatterplot(wh_2020_df)
make_scatterplot(wh_2021_df)
make_scatterplot(wh_2019_df)
make_scatterplot(wh_2018_df)
make_scatterplot(wh_2017_df)
make_scatterplot(wh_2016_df)
make_scatterplot(wh_2015_df)
runApp('~/info201/stacy_project')
View(wh_2020_df)
View(wh_2021_df)
colnames(wh_2017_df)
names(wh_2021_df)[4] <- 'Economy..GDP.per.Capita.'
names(wh_2020_df)[4] <- 'Economy..GDP.per.Capita.'
make_scatterplot(wh_2020_df)
make_scatterplot(wh_2021_df)
warnings()
region_wh2019 <- happiness_by_region_with_na(wh_2019_df)
# clean the 3 years without region data
wh_new_2017_df <- merge(x = wh_2021_df, y = wh_2017_df, by = 'Country', all = TRUE) %>%
drop_na() %>%
select(Country, Region, Happiness.Score.y) %>%
group_by(Region) %>%
summarize(avg_by_region = mean(Happiness.Score.y)) %>%
arrange(desc(avg_by_region))
# Create a function that cleans the data & returns the regional avg happiness each year
happiness_by_region_with_na <- function(na_df) {
region_no_na_df <- merge(x = wh_2021_df, y = na_df, by = 'Country', all = TRUE) %>%
drop_na() %>%
select(Country, Region, Happiness.Score.y) %>%
group_by(Region) %>%
summarize(avg_by_region = mean(Happiness.Score.y)) %>%
arrange(desc(avg_by_region))
}
# Defining new df with avg regional happiness each year: 19, 18, 17
region_wh2019 <- happiness_by_region_with_na(wh_2019_df)
region_wh2018 <- happiness_by_region_with_na(wh_2018_df)
region_wh2017 <- happiness_by_region_with_na(wh_2017_df)
View(wh_new_2017_df)
new_2017 <- merge(x = wh_2021_df, y = wh_2017_df, by = 'Country', all = TRUE)
View(new_2017)
colnames(new_2017)
View(region_wh2017)
View(wh_2018_df)
View(wh_2017_df)
new_2017 <- merge(x = wh_2021_df, y = wh_2017_df, by = 'Country', y = TRUE) %>%
drop_na()
new_2017 <- merge(x = wh_2021_df, y = wh_2017_df, by = 'Country', all.y = TRUE) %>%
drop_na()
View(new_2017)
new_2017 <- left_join(wh_2021_df, wh_2017_df, by = 'Country')
new_2017 <- left_join(wh_2021_df, wh_2017_df, by = 'Country')
just_region <- wh_2021_df %>%
select('Country', 'Region')
View(just_region)
new_2017 <- left_join(just_region, wh_2017_df, by = 'Country')
new_2017 <- merge(x = just_region, y = wh_2017_df, by = 'Country', all.y = TRUE) %>%
drop_na()
second_2017 <- add_region(wh_2017_df)
just_region <- wh_2021_df %>%
select('Country', 'Region')
add_region <- function(df) {
with_region <- merge(x = just_region, y = wh_2017_df, by = 'Country', all.y = TRUE) %>%
drop_na()
}
second_2017 <- add_region(wh_2017_df)
View(second_2017)
new_2017 <- add_region(wh_2017_df)
new_2017 <- add_region(wh_2017_df)
new_2018 <- add_region(wh_2018_df)
new_2018 <- add_region(wh_2019_df)
w_region_2017 <- add_region(wh_2017_df)
w_region_2018 <- add_region(wh_2018_df)
w_region_2019 <- add_region(wh_2019_df)
make_scatterplot(wh_2021_df)
# working: 16 & 15
make_scatterplot(wh_2020_df)
make_scatterplot(wh_2019_df)
make_scatterplot(w_region_2019)
make_scatterplot(wh_2015_df)
colnames(new_2017)
names(wh_2021_df)[4] <- 'Economy..GDP.per.Capita.'
names(wh_2020_df)[4] <- 'Economy..GDP.per.Capita.'
# not working bc no Region: 19, 18, 17
just_region <- wh_2021_df %>%
select('Country', 'Region')
add_region <- function(df) {
with_region <- merge(x = just_region, y = wh_2017_df, by = 'Country', all.y = TRUE) %>%
drop_na()
}
w_region_2017 <- add_region(wh_2017_df)
w_region_2018 <- add_region(wh_2018_df)
w_region_2019 <- add_region(wh_2019_df)
runApp('~/info201/stacy_project')
runApp('~/info201/stacy_project')
runApp('~/info201/stacy_project')
runApp('~/info201/stacy_project')
runApp('~/info201/stacy_project')
runApp('~/info201/stacy_project')
runApp('~/info201/stacy_project')
runApp('~/info201/stacy_project')
runApp('~/info201/stacy_project')
runApp('~/info201/stacy_project')
runApp('~/info201/stacy_project')
runApp('~/info201/stacy_project')
runApp('~/info201/stacy_project')
